<ruby>
   help = %Q|
    Description:
       This Metasploit RC file can be used to manage msfconsole database sutch as:
       display database data, record msfconsole activity, add hosts to database,
       import nmap_scan.xml (or any xml file), import a list of hosts contain inside
       a text file (one-per-line-entrys) and clean all database data at exit.

    Execute in msfconsole:
       setg CLEAN <true-or-blank>
       setg RECORD <true-or-blank>
       setg XML_EXPORT <true-or-blank>
       setg WORKSPACE <new-workspace-name>
       setg WORKSPACE_DEL <delete-workspace-name>
       setg DBHOST <add-host-ip-to-database>
       setg XML_IMPORT <absoluct-path-of-nmap.xml-to-import>
       setg TXT_IMPORT <absoluct-path-of-hosts-list-to-import>
       resource <path-to-script>/manage_db.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>
    |
    print_line(help)
    Rex::sleep(2.0)
    print_line("")


    if (framework.datastore['RECORD'] == "true")
       run_single("spool /root/database.log")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['WORKSPACE'] == nil or framework.datastore['WORKSPACE'] == '')
       run_single("workspace -a #{framework.datastore['WORKSPACE']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['WORKSPACE_DEL'] == nil or framework.datastore['WORKSPACE_DEL'] == '')
       run_single("workspace -d #{framework.datastore['WORKSPACE_DEL']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['DBHOST'] == nil or framework.datastore['DBHOST'] == '')
       run_single("hosts -a #{framework.datastore['DBHOST']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['TXT_IMPORT'] == nil or framework.datastore['TXT_IMPORT'] == '')
       check_import = "#{framework.datastore['TXT_IMPORT']}"
       unless (File.exist?(check_import))
          print_error("[ERROR] File to import not found.")
          print_error("[IMPORT] #{check_import}")
          return nil
       end
       import_txt = File.read("/root/rhosts.txt")
          parse_data = import_txt.split(' ')
          join_strings = parse_data.join(' ')
          print_line("List of hosts to import")
          print_line("=======================")
          run_single("hosts -a #{join_strings}")
          print_line("")
          Rex::sleep(1.5)
    end

    unless (framework.datastore['XML_IMPORT'] == nil or framework.datastore['XML_IMPORT'] == '')
       xml_file = "#{framework.datastore['XML_IMPORT']}"
       print_status("import: #{xml_file}")
       unless (File.exist?(xml_file))
          print_error("Abort: Script can not find the path inputed.")
          return nil
       end
       run_single("db_import #{framework.datastore['XML_IMPORT']}")
       Rex::sleep(1.0)
    end


    run_single("workspace -v")
    Rex::sleep(0.5)
    run_single("hosts -c address,os_name,purpose")
    print_line("")
    Rex::sleep(0.5)
    run_single("services -c name,port,state")
    Rex::sleep(0.5)
    run_single("sessions -v")
    print_line("")
    Rex::sleep(0.5)
    run_single("creds")
    Rex::sleep(0.5)
    run_single("loot")
    Rex::sleep(0.5)
    run_single("vulns")
    Rex::sleep(0.5)
    print_line("")
    Rex::sleep(2.0)


   if (framework.datastore['XML_EXPORT'] == "true")
      print_warning("Exporting database to: database.xml")
      Rex::sleep(1.5)
      run_single("db_export -f xml database.xml")
   end

   print_warning("Please wait, Cleaning global variables.")
   Rex::sleep(1.5)
   if (framework.datastore['CLEAN'] == "true")
      run_single("unsetg RHOSTS CLEAN RECORD DBHOST TXT_IMPORT XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL")
      print_warning("Please wait, Cleaning database.")
      Rex::sleep(1.5)
      run_single("hosts -d")
      run_single("services -d")
      print_line("")
   else
      run_single("unsetg RHOSTS CLEAN RECORD DBHOST TXT_IMPORT XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL")
      print_line("")
   end

   print_line("")
   print_line("Database Commands              Description")
   print_line("-----------------              -----------")
   print_line("hosts                          Display hosts database")
   print_line("hosts -d                       Delete all hosts from database")
   print_line("hosts -d 10.10.10.2            Delete address from database")
   print_line("hosts -a 10.10.10.3            Add address to database")
   print_line("services                       Display services database")
   print_line("services -d                    Delete services from database")
   print_line("")
   print_line("Resource Commands              Description")
   print_line("-----------------              -----------")
   print_line("setg CLEAN true                Clean database at exit")
   print_line("setg RECORD true               Record msfconsole activity")
   print_line("setg DBHOST 10.10.10.3         Add RHOSTS to database")
   print_line("setg WORKSPACE pedro           Add workspace to database")
   print_line("setg WORKSPACE_DEL pedro       Delete workspace from database")
   print_line("setg XML_EXPORT true           Export database.xml (local)")
   print_line("setg XML_IMPORT /root/dic.xml  Import database.xml (local)")
   print_line("setg TXT_IMPORT /root/dic.txt  Import hosts list (local)")
   print_line("resource /root/manage_db.rc    Execute resource script")
   print_line("")

</ruby>
