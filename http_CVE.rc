   <ruby>
      help = %Q|
        Description:
          setg NSE_PATH /usr/share/nmap/scripts - The absoluct path of nmap nse scripts local folder.
          setg RANDOM_HOSTS true - To instruct db_nmap to random search for hosts with ports 21:22:80 open
          setg RHOSTS 18.220.109.8 61.91.160.13 - To instruct db_nmap to check targets for ports 21:22:80 open
          http_CVE will use nmap to search/check for ports 21:22:80 open, then it populates the msfdb with a
          list of hosts found, and run auxiliary modules + freevulnsearch.nse nmap script againts db targets.
          if none value (setg) has povided then this resource script will use is own default values.

        Execute in msfconsole:
          setg RANDOM_HOSTS <true-or-blank>
          setg RHOSTS <hosts-separated-by-spaces>
          setg NSE_PATH <absoluct-path-of-nmap-scripts-folder>
          resource <path-to-script>/http_CVE.rc

        Author:
          r00t-3xp10it  <pedroubuntu10[at]gmail.com>
      |
      print_line(help)
      Rex::sleep(2.0)


      if (framework.datastore['RANDOM_HOSTS'] == 'true')
         print_line("RHOSTS => nmap -sV -Pn -T4 -O -iR 1000 -p 21,22,80 --open --script=http-headers.nse")
      elsif (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS 192.168.1.0/24")
      elsif (framework.datastore['RHOSTS'])
         print_line("RHOSTS => #{framework.datastore['RHOSTS']}")
      end
      if (framework.datastore['NSE_PATH'] == nil or framework.datastore['NSE_PATH'] == '')
         nse = "/usr/share/nmap/scripts/freevulnsearch.nse"
         print_line("NSE_PATH => #{nse}")
      else
         nse = "#{framework.datastore['NSE_PATH']}/freevulnsearch.nse"
         print_line("NSE_PATH => #{nse}")
      end
      unless (framework.datastore['RANDOM_HOSTS'] == 'true')
         run_single("db_nmap -sV -Pn -T4 -O -p 21,22,80 --open --script=http-headers.nse #{framework.datastore['RHOSTS']}")
      else
         print_warning("db_nmap: search for random remote targets with ports 21:22:80 open (ftp,ssh,http)")
         run_single("db_nmap -sV -Pn -T4 -O -iR 1000 -p 21,22,80 --open --script=http-headers.nse")
      end

      run_single("spool /root/http_CVE.log")
      print_line("")
      run_single("services")
      print_good("Reading msfdb database for info.")
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      xname = framework.db.hosts.map(&:os_name).join(' ').gsub(' ',', ')

      if xhost.nil? or xhost == ''
           print_error("db_nmap scan did not find any alive connections.")
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
           print_line("")
           run_single("unsetg RHOSTS RANDOM_HOSTS NSE_PATH")
           File.delete('/root/http_CVE.log')
           return nil
      elsif xport.nil? or xport == ''
           print_error("db_nmap did not find any 21:22:80 open ports.")
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
           print_line("")
           run_single("unsetg RHOSTS RANDOM_HOSTS NSE_PATH")
           run_single("services -d")
           run_single("hosts -d")
           File.delete('/root/http_CVE.log')
           return nil
      end

      print_status("Operative systems: #{xname}")
      run_single("setg RHOSTS #{xhost}")
      Rex::sleep(2.0)
      unless (File.exist?(nse))
           print_error("[ERROR] freevulnsearch.nse script not found in nmap db.")
           print_error("[ERROR] Download nse script and install it before running this rc file.")
           Rex::sleep(1.0)
           print_warning("wget https://raw.githubusercontent.com/OCSAF/freevulnsearch/master/freevulnsearch.nse")
           print_warning("sudo cp freevulnsearch.nse #{nse}")
           print_warning("sudo nmap --script-updatedb")
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
           print_line("")
           run_single("unsetg RHOSTS RANDOM_HOSTS NSE_PATH")
           run_single("services -d")
           run_single("hosts -d")
           File.delete('/root/http_CVE.log')
           return nil
      else
           print_good("freevulnsearch.nse script found.")
      end

         if xport =~ /21/i
              print_warning("Remote Target port 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("set THREADS 35")
              run_single("exploit")
         end

         if xport =~ /80/i
              print_warning("Remote Target port 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/dir_listing")
              run_single("set THREADS 55")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         Rex::sleep(1.5)
         print_warning("Running CVE checks againts: #{framework.datastore['RHOSTS']}")
         run_single("db_nmap -sV -T4 -Pn --script=freevulnsearch.nse #{framework.datastore['RHOSTS']}")

print_warning("please wait, Cleaning msfdb Database.")
Rex::sleep(1.5)
print_line("")
run_single("unsetg RHOSTS THREADS RANDOM_HOSTS NSE_PATH")
run_single("services -d")
run_single("hosts -d")
print_warning("Logfile stored under: /root/http_CVE.log")
</ruby>
