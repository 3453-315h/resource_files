<ruby>
   help = %Q|
    Description:
       setg REBUILD true - Rebuild msfconsole database.
       setg WORKSPACE pentesting - create new workspace.
       setg WORKSPACE_DEL pentesting - Delete workspace.
       setg CLEAN true - Clean msfconsole database at exit.
       setg DBHOST 192.168.1.254 - Add hosts to msfconsole database.
       setg XML_EXPORT true - Export msfconsole database to database.xml
       setg RECORD true - To instruct rc script to record msfconsole activity.
       setg XML_IMPORT /root/nmap_scan.xml - Instruct rc script to import xml files.
       This Metasploit RC file can be used to manage msfconsole database sutch as:
       display database data, record msfconsole activity, add hosts to database,
       import nmap_scan.xml (or any xml file) and clean all database data at exit.

    Execute in msfconsole:
       setg CLEAN <true-or-blank>
       setg RECORD <true-or-blank>
       setg REBUILD <true-or-blank>
       setg XML_EXPORT <true-or-blank>
       setg WORKSPACE <new-workspace-name>
       setg WORKSPACE_DEL <delete-workspace-name>
       setg DBHOST <add-host-ip-to-database>
       setg XML_IMPORT <absoluct-path-of-nmap.xml-to-import>
       resource <path-to-script>/manage_db.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>
    |
    print_line(help)
    Rex::sleep(1.5)


    if (framework.datastore['RECORD'] == "true")
       run_single("spool /root/database.log")
       Rex::sleep(1.0)
    end

    if (framework.datastore['REBUILD'] == "true")
       print_status("Please wait, rebuilding database.")
       Rex::sleep(1.0)
       run_single("msfdb reinit")
       return nil
    end

    unless (framework.datastore['WORKSPACE'] == nil or framework.datastore['WORKSPACE'] == '')
       run_single("workspace -a #{framework.datastore['WORKSPACE']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['WORKSPACE_DEL'] == nil or framework.datastore['WORKSPACE_DEL'] == '')
       run_single("workspace -d #{framework.datastore['WORKSPACE_DEL']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['DBHOST'] == nil or framework.datastore['DBHOST'] == '')
       run_single("hosts -a #{framework.datastore['DBHOST']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['XML_IMPORT'] == nil or framework.datastore['XML_IMPORT'] == '')
       xml_file = "#{framework.datastore['XML_IMPORT']}"
       print_status("import: #{xml_file}")
       unless (File.exist?(xml_file))
          print_error("Script can not find the path inputed.")
          return nil
       end
       run_single("db_import #{framework.datastore['XML_IMPORT']}")
       Rex::sleep(1.0)
    end

         print_status("checking database connection")
         Rex::sleep(1.5)
         run_single("db_status")
         print_status("checking database workspace")
         Rex::sleep(1.5)
         run_single("workspace -v")
         print_status("checking database sessions")
         Rex::sleep(1.5)
         run_single("sessions -v")
         print_status("checking database hosts")
         Rex::sleep(1.5)
         run_single("hosts")
         print_status("checking database sevices")
         Rex::sleep(1.5)
         run_single("services")
         print_status("checking database creds")
         Rex::sleep(1.5)
         run_single("creds")
         print_status("checking database loot")
         Rex::sleep(1.5)
         run_single("loot")
         Rex::sleep(2.0)

   if (framework.datastore['XML_EXPORT'] == "true")
      print_warning("Exporting database to: database.xml")
      Rex::sleep(1.5)
      run_single("db_export -f xml database.xml")
   end

   print_warning("Please wait, Cleaning global variables.")
   Rex::sleep(1.5)
   print_line("")
   if (framework.datastore['CLEAN'] == "true")
      run_single("unsetg HELP RHOSTS RECORD DBHOST XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL")
      print_line("")
      print_warning("Please wait, Cleaning database.")
      Rex::sleep(1.5)
      run_single("services -d")
      run_single("hosts -d")
      run_single("unsetg CLEAN")
      print_line("")
   else
      run_single("unsetg HELP RHOSTS CLEAN RECORD DBHOST XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL")
      print_line("")
   end
</ruby>
